<?xml version="1.0" encoding="UTF-8" ?>
<!--
  #%L
  XPOM Maven Plugin
  %%
  Copyright (C) 2012 David Thomas Hume
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<article xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <info>
    <title>Generating new XPOM Stylesheets</title>

    <pubdate>2012-06-30</pubdate>

    <abstract>
      <para>
        Example usage of the
        <code xlink:href="../new-mojo.html">xpom:new</code> goal.
      </para>
    </abstract>
  </info>
  
  <para>
    One of the biggest hurdles in getting started with new XML based
    technologies is that one tends to be plagued with hard to remember URIs.
    To help with this, the plugin provides a
    <code xlink:href="../new-mojo.html">new</code> goal which can
    be used to generate base XPOM stylesheets, with common imports and
    namespaces declared, from which to begin authoring. At a minimum, you
    can use something like:
  </para>
    
  <informalexample>
    <screen>$ mvn xpom:new -DoutputFile=src/xpom/my-transform.xsl</screen>
  </informalexample>
  
  <para>
    which will result in the creation of
    <filename class="devicefile">src/xpom/my-transform.xsl</filename> with
    content similar to the following:
  </para>
  
  <informalexample>
    <programlisting language="xml"
><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:pom="http://maven.apache.org/POM/4.0.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xpom="urn:xpom:core"
  exclude-result-prefixes="#all"
  version="2.0">

  <xsl:import href="urn:xpom:core"/>

  <xsl:output method="xml" indent="yes"/>

  <xsl:template match="/">
    <!-- TODO -->
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
  </informalexample>
    
  <para>
    It is possible to have the mojo automatically add the required
    <tag class="element">xsl:import</tag> for the standard
    <link xlink:href="../lib/filter-and-identity.html">filter and
    identity</link> stylesheets:
  </para>

  <informalexample>
      <screen>
$ mvn xpom:new -DoutputFile=my-transform.xsl -Dbase=identity</screen>
  </informalexample>

  <para>To produce a file similar to:</para>

  <informalexample>
    <programlisting language="xml"
><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:pom="http://maven.apache.org/POM/4.0.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xpom="urn:xpom:core"
  exclude-result-prefixes="#all"
  version="2.0">

  <xsl:import href="urn:xpom:core"/>

  <xsl:import href="urn:xpom:core:identity"/>

  <xsl:output method="xml" indent="yes"/>

  <!--
    Simple template which plays well with all the available base transforms. 
    Modify or replace as appropriate. 
  -->
  <xsl:template match="/">
    <xsl:apply-templates mode="#current" select="@* | node()"/>
  </xsl:template>
</xsl:stylesheet>
]]></programlisting>
  </informalexample>
    
  <para>
    Since it is common to <tag class="attribute">match</tag> /
    <tag class="attribute">select</tag> nodes from the POM namespace, and
    to produce POM namespaced nodes as output, the goal can be configured
    to add a default namespace declaration (<tag
    class="namespace">xmlns</tag>) and / or a <tag class="attribute"
    >xpath-default-namespace</tag> attribute to the <tag class="element"
    >xsl:stylesheet</tag> via the <code
    xlink:href="../new-mojo.html#defaultOutputNamespace"
    >defaultOutputNamspace</code> and
    <code xlink:href="../new-mojo.html#defaultXPathNamespace"
    >defaultXPathNamespace</code> properties, which can be specified on
    the command line using <code>-DdefaultOutputNS</code> and
    <code>-DdefaultXPathNS</code> respectively, e.g:
  </para>
    
  <informalexample>
    <screen
>$ mvn xpom:new -DoutputFile=my-transform.xsl -DdefaultOutputNS -DdefaultXPathNS
</screen>
  </informalexample>

  <para>To produce a file similar to:</para>

  <informalexample>
    <programlisting language="xml"
><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:pom="http://maven.apache.org/POM/4.0.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xpom="urn:xpom:core"
  
  xmlns="http://maven.apache.org/POM/4.0.0"
  xpath-default-namespace="http://maven.apache.org/POM/4.0.0"
  
  exclude-result-prefixes="#all"
  version="2.0">

  <xsl:import href="urn:xpom:core"/>

  <xsl:output method="xml" indent="yes"/>

  <xsl:template match="/">
    <!-- TODO -->
  </xsl:template>
</xsl:stylesheet>
]]></programlisting>
  </informalexample>
    
  <para>
    One final point to note about the <code>new</code> goal is that it will
    not, by default, overwrite existing files (failing instead). If you wish
    to overwrite an existing file then set the <code
    xlink:href="../new-mojo.html#overwrite">overwrite</code> property to
    <code>true</code>, which can be accomplished using
    <code>-Doverwrite</code> on the command line. 
  </para>
</article>
